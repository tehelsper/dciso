#!/usr/bin/env bash
## Debian Custom ISO Initialization of Chroot
## 2022 @RackunSec

## Define some colors:
BOLD="\e[1m" ## Bold Text
RED="\e[91m" ## Red Text
RST="\e[0m" ## Reset to default Text 
YEL="\e[93m" ## Yellow Text
GRN="\e[92m" ## Green Text

printf "\n Debian Custom ISO Utility\n"
printf " (c) GNU 2022 - @RackunSec\n"

## Define Usage of app:
dciso_usage () {
  printf "\n${BOLD}${YEL}Usage${RST}: ./dciso (${RED}args${RST})\n"
  printf "\nArguments:\n"
  printf " ** ${YEL}Dependencies${RST}:\n"
  printf "  ${BOLD}${RED}install-dep${RST} - Install all dciso dependencies.\n"
  printf "\n ** ${YEL}Chroot Tools${RST}:\n"
  printf "  ${BOLD}${RED}build-chroot (RELEASE)${RST} - Build the chroot directory.\n"
  printf "  ${BOLD}${RED}start-chroot${RST} - Starts a chroot session in ./chroot.\n"
  printf "  ${BOLD}${RED}end-chroot${RST} - Ends the current chroot session from ./chroot\n"
  printf "  ${BOLD}${RED}clean${RST} - Destroys the chroot directory.\n"
  printf "\n ** ${YEL}In Chroot Tools${RST}:\n"
  printf "  ${BOLD}${RED}in-init${RST} - Performs first time set of of the chroot, should be ran within chroot.\n"
  printf "  ${BOLD}${RED}in-start-chroot${RST} - Sets up the current chroot session, should be ran within chroot.\n"
  printf "  ${BOLD}${RED}in-end-chroot${RST} - ends the current chroot session, should be ran within chroot.\n"
  printf "\n ** ${YEL}Generate an ISO Image${RST}:\n"
  printf "  ${BOLD}${RED}mkiso (ISO NAME).iso${RST} - Will create an ISO file from ./chroot\n\n"
  exit 1337
}

## Get network connection up:
dciso_net () {
  dhclient -v
}

dciso_mkiso () {
  iso_name=$1
  printf "${BOLD}${GRN}[i]${RST} Creating ISO file $iso_name from ./chroot.\n"
  printf "${BOLD}${GRN}[i]${RST} Creating development directories in ./binary ... \n"
  rm -rf image 2>/dev/null # remove old dev files
  rm -rf scratch 2>/dev/null # remove old versions
  mkdir -p {image/live,scratch}
  ### Create SquashFS:
  printf "${YEL}[i]${RST} Making SquashFS filesystem, this will take some time ... \n"
  mksquashfs chroot image/live/filesystem.squashfs -comp xz -e boot
  ### Copy the VMLINUZ and INITRD into the ./binary directory:
  printf "${BOLD}${GRN}[i]${RST} Copying Kernel and InitRAMFS to the development directory ... \n" # copy over LINUX
  cp chroot/boot/vmlinuz-* image/vmlinuz
  cp chroot/boot/initrd.img-* image/initrd
  ### Copt GRUB Menu over to new image area:
  cp files/grub.cfg scratch/grub.cfg
  touch image/DEBIAN_CUSTOM

  #################################
  ### UEFI/BIOS Booting:

  ### (step 1)
  ### Create Grub UEFI/BIOS image:
  grub-mkstandalone \
  	--format=x86_64-efi \
  	--output=scratch/bootx64.efi \
  	--locales="" \
  	--fonts="" \
  	"boot/grub/grub.cfg=scratch/grub.cfg"

  ### (step 2)
  ### Create Fat 16 UEFI boot disk image:
  (cd scratch && dd if=/dev/zero of=efiboot.img bs=1M count=10 && \
  	mkfs.vfat efiboot.img && \
  	mmd -i efiboot.img efi efi/boot && \
  	mcopy -i efiboot.img ./bootx64.efi ::efi/boot/)

  ### (step 3)
  ### Create GRUB BIOS Image:
  grub-mkstandalone \
  	--format=i386-pc \
  	--output=scratch/core.img \
  	--install-modules="linux normal iso9660 biosdisk memdisk search tar ls" \
  	--modules="linux normal iso9660 biosdisk search" \
  	--locales="" \
  	--fonts="" \
  	"boot/grub/grub.cfg=scratch/grub.cfg"

  ### (step 4)
  ### Combine GRUB with our Bootloader IMG:
  cat /usr/lib/grub/i386-pc/cdboot.img \
  	scratch/core.img \
  	> scratch/bios.img

  ###
  ### Finally, Generate the ISO Image file:
  xorriso \
  	-as mkisofs \
  	-iso-level 3 \
  	-full-iso9660-filenames \
  	-volid "DEBIAN_CUSTOM" \
  	-eltorito-boot \
  	 boot/grub/bios.img \
  	 -no-emul-boot \
  	 -boot-load-size 4 \
  	 -boot-info-table \
  	 --eltorito-catalog boot/grub/boot.cat \
  	--grub2-boot-info \
  	--grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
  	--eltorito-alt-boot \
  	 -e EFI/efiboot.img \
  	 -no-emul-boot \
  	 -append_partition 2 0xef scratch/efiboot.img \
  	 -output "$iso_name" \
  	 -graft-points \
  	   "image" \
  	   /boot/grub/bios.img=scratch/bios.img \
  	   /EFI/efiboot.img=scratch/efiboot.img
   ls -lah $iso_name
   printf "${BOLD}${GRN}[i]${RST} ISO file generated.\n"
}

dciso_depends () {
  apt update
  apt install -y debootstrap squashfs-tools xorriso grub-pc-bin grub-pc grub-efi-amd64-bin mtools live-build git vim curl dosfstools git 1>/dev/null
}

## Workflow of app:
if [[ $# -eq 1 ]] ## most commands are 1 arg:
then
  if [[ "$1" == "start-chroot" ]] ## start the chroot
  then
    printf "${BOLD}${GRN}[i]${RST} Mounting devices into chroot, when done, you will be chrooted... \n"
    mount --bind /dev ./chroot/dev/
    mount --bind /dev/pts ./chroot/dev/pts/
    mount --bind /dev/shm ./chroot/dev/shm # REQUIRED
    mount --bind /proc ./chroot/proc/
    mount --bind /sys  ./chroot/sys/
    mount --bind /run ./chroot/run # for x11 mouse and keyboard functioning!
    chroot ./chroot
  elif [[ "$1" == "end-chroot" ]]
  then
    printf "${BOLD}${GRN}[i]${RST} Umounting devices in ./chroot ... \n"
    umount {chroot/dev/pts,chroot/dev,chroot/sys,chroot/proc,chroot/run}
    printf "${BOLD}${GRN}[i]${RST} Completed. I recommend that you reboot.\n"
  elif [[ "$1" == "clean" ]]
  then
    printf "${RED}${BOLD} WARNING: THIS CANNOT BE UNDONE!\n${RST}"
    printf "${RED}[?]${RST} Do you really want to remove the ./chroot directory? [y/N] "
    read ans
    if [[ "$ans" == "y" ]]
    then
      rm -rf chroot
      printf "${BOLD}${GRN}[i]${RST} Done. Re-run \"./dciso build-chroot (RELEASE)\" to make a new chroot environment.\n"
      exit
    fi
  elif [[ "$1" == "install-dep" ]]
  then
    printf "${BOLD}${GRN}[i]${RST} Installing DCISO dependencies ... \n"
    dciso_depends
  elif [[ "$1" == "in-init" ]]
  then
    printf "${BOLD}${GRN}[i]${RST} Initialization process started.\n"
    dciso_net
    ## install initial depends:
    printf "${BOLD}${GRN}[i]${RST} Installing initial dependencies ... \n"
    apt update
    apt install locales systemd-sysv live-boot -y
    ## configure initial depends:
    printf "${BOLD}${GRN}[i]${RST} Configuring initial dependencies ... \n"
    export LANGUAGE=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    locale-gen en_US.UTF-8
    dpkg-reconfigure locales
    printf "${BOLD}${GRN}[i]${RST} Generating a new system UUID ... \n"
    dbus-uuidgen > /var/lib/dbus/machine-id
    printf "${BOLD}${GRN}[i]${RST} Installing a new kernel ... \n"
    apt install -y linux-image-amd64 live-boot systemd-sysv
    update-initramfs -u
    ## Ask about Demon Linux Stuff (This by no means is a full list, but a good start):
    printf "${BOLD}${RED}[?]${RST} Would you like me to install Demon Linux-specific base applications [y/N]? "
    read ans
    if [[ "$ans" == "y" ]]
    then
      printf "${BOLD}${GRN}[i]${RST} Installing customization apps ... \n"
      apt install -y vim ftp open-vm-* curl git xfce4 tilix python3-pip python3 \
        gedit dbus-x11 nmap unzip papirus-icon-theme python3-venv gedit proxychains4 freerdp2-x11 \
        lightdm-settings lightdm slick-greeter xfce4-goodies libpcap-dev wget \
        libssl-dev tcpdump firefox-esr unzip sudo smbclient imagemagick ghostscript gnome-themes-extra gnome-themes-extra-data \
        tshark simplescreenrecorder
      python3 -m pip install pipx ## for pipx apps
      python3 -m pip install poetry ## For poetry-enabled apps
      pipx ensurepath ## Fixes pipx $PATH
      pipx install mitm6 ## MITM6 is great
      ## Build out the Red Team directory for all self-managed tools:
      mkdir -p /redteam/windows-domains
      mkdir -p /redteam/wifi
      mkdir -p /redteam/osint
      mkdir -p /redteam/web
      mkdir -p /redteam/exploit
      mkdir -p /redteam/rackunsec
      mkdir -p /redteam/passwords
      mkdir -p /redteam/wordlists
      mkdir -p /redteam/printers
      ## Install my stuff:
      cd /redteam/rackunsec
      git clone https://github.com/RackunSec/py-web-tools.git
      git clone https://github.com/RackunSec/py-ad-tools.git
      git clone https://github.com/RackunSec/cme-modules.git
      git clone https://github.com/RackunSec/rackun-wordlists.git
      git clone https://github.com/RackunSec/q-dehashed.git
      cd /usr/share && wget https://demonlinux.com/download/packages/4.X/demon.zip && unzip demon.zip && rm demon.zip
      ## Build out Pentest area:
      mkdir -p /root/Pentest/web
      mkdir -p /root/Pentest/scans
      mkdir -p /root/Pentest/files
      mkdir -p /root/Pentest/users
      ## Install the most beautiful font:
      cd /usr/share/fonts/truetype/ && wget https://demonlinux.com/download/packages/4.X/ubuntu-font.zip && unzip ubuntu-font.zip && rm ubuntu-font.zip && fc-cache -f
      ## Install MSF:
      cd /redteam/exploit
      curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && \
      chmod 755 msfinstall && \
      ./msfinstall
      ## Install Searchsploit:
      cd /redteam/exploit
      git clone https://github.com/offensive-security/exploitdb.git
      chmod +x searchsploit
      ## Install BloodHound:
      cd /redteam/windows-domains
      wget https://demonlinux.com/download/packages/4.X/BloodHound-linux-x64.zip
      unzip BloodHound-linux-x64.zip
      rm BloodHound-linux-x64.zip
      ## Install Neo4j:
      echo "deb http://httpredir.debian.org/debian stretch-backports main" | sudo tee -a /etc/apt/sources.list.d/stretch-backports.list
      apt update
      apt install openjdk-11-jre -y
      wget -O - https://debian.neo4j.com/neotechnology.gpg.key | sudo apt-key add -
      echo 'deb https://debian.neo4j.com stable latest' | sudo tee -a /etc/apt/sources.list.d/neo4j.list
      apt update
      apt install neo4j=1:4.4.9 -y
      ## Install Responder:
      cd /redteam/windows-domains/ && git clone https://github.com/lgandx/Responder.git
      ## Install SQLMap
      cd /redteam/web && git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap
      ## Install Ulauncher:
      cd /tmp
      wget https://demonlinux.com/download/packages/4.X/ulauncher_5.15.0_all.deb
      dpkg -i ulauncher_5.15.0_all.deb
      apt -f install -y
      ## Install Others:
      python3 -m pip install ldapdomaindump
      pipx install spraycharles
      cd /redteam/printers
      git clone https://github.com/RUB-NDS/PRET.git
      python3 -m pip install colorama pysnmp
      cd PRET && chmod +x *.py
      cd /redteam/osint
      git clone https://github.com/laramies/theHarvester.git
      cd theHarvester
      python3 -m pip install -r requirements/base.txt
      cd /redteam/windows-domains
      git clone https://github.com/ly4k/Certipy.git
      python3 Certipy/setup.py install
      python3 -m pip install coercer
      cd /redteam/windows-domains
      git clone https://github.com/cddmp/enum4linux-ng.git
      cd enum4linux-ng
      python3 -m pip install -r requirements.txt
      cd /redteam/windows-domains && wget https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_linux_amd64 -O kerbrute
      chmod +x kerbrute
      cd /redteam/windows-domains/ && git clone https://github.com/dirkjanm/krbrelayx
      chmod +x *.py
      cd /redteam/windows-domains/ && git clone https://github.com/Hackndo/lsassy && cd lsassy && python3 setup.py install
      cd /redteam/windows-domains/ && git clone https://github.com/tothi/rbcd-attack.git && cd rbcd-attack
      python3 -m pip install dsinternals
   
      ## TODO add more items ...       
    fi
    printf "${BOLD}${GRN}[i]${RST} Please set a new root password.\n"
    passwd root
  elif [[ "$1" == "in-start-chroot" ]] ## This may not be necessary
  then
    dciso_net ## get an IP
    mount none -t proc /proc
    mount none -t sysfs /sys
    mount none -t devpts /dev/pts
    printf "${BOLD}${GRN}[i]${RST} Chroot started: [READY]\n"
  elif [[ "$1" == "in-end-chroot" ]] ## This does a lot of cleaning up
  then
    cp -Rvvv /var/log/postgresql /tmp/
    rm /var/log/*
    rm /var/log/*/*
    rm /var/log/*/*/*
    cp -Rvvv /tmp/postgresql /var/log/postgresql
    echo "" > /root/.xsession-errors
    ## get rid of apt-get stuff
    apt-get clean
    rm /var/lib/apt/lists/ftp*
    rm /var/lib/apt/lists/http*
    ## get rid of stuff from home
    rm /root/.bash_history
    rm /root/.ssh/known_hosts
    rm -rf /root/Downloads/*
    rm -rf /root/Desktop/*
    rm -rf /root/Videos/*
    rm /var/lib/dbus/machine-id && rm -rf /tmp/*
    umount /proc /sys /dev/pts /dev
    printf "${BOLD}${GRN}[i]${RST} Chroot session ended.\n"
    exit
  elif [[ "$1" == "mkiso" ]]
  then
    printf "\n${BOLD}${RED}[?]${RST} I need an ISO image file name ... \n"
    dciso_usage
  else
    if [ "$1" != "build-chroot" ]
    then
      printf "\n${BOLD}${RED}[?]${RST} I don't know what ${1} is ... \n"
      dciso_usage
    else
      printf "\n${BOLD}${RED}[?]${RST} Build what? I need a release name (buster, bullseye, etc).\n"
      dciso_usage
    fi
  fi
elif [[ $# -eq 2 ]]
then
  if [[ "$1" == "build-chroot" ]]
  then
    printf "${BOLD}${GRN}[i]${RST} Building chroot directory with ${2} ... \n"
    debootstrap --arch=amd64 ${2} chroot
    printf "${BOLD}${GRN}[i]${RST} Copying tools into ./chroot\n"
    mkdir chroot/etc/live-tools
    cp dciso chroot/etc/live-tools/
    chmod +x chroot/etc/live-tools/*
    printf "${BOLD}${GRN}[i]${RST} Completed. Run './dciso start-chroot' to enter chroot.\n"
    printf "${BOLD}${GRN}[i]${RST} Once in the chrooted environment, ensure that you run \"./etc/live-tools/dciso in-init\"\n"
  elif [[ "$1" == "build-overlayfs" ]]
  then
    if [ ! -d ./chroot ]
    then
      printf "\n${BOLD}${RED}[?]${RST} Chroot has not been made yet ... \n"
      exit 1
    fi
    if [ ! -d ./rootfs/${2} ]
    then
      printf "\n${BOLD}${RED}[?]${RST} Overlay FS ${2} is missing ... \n"
      exit 1
    fi
    printf "${BOLD}${GRN}[i]${RST} Copying overlay FS ${2} into ./chroot\n"
    rsync -r -K ./rootfs/${2}/* ./chroot/
    printf "${BOLD}${GRN}[i]${RST} Completed.\n"
  elif [[ "$1" == "mkiso" ]]
  then
    dciso_mkiso $2 ## What weird syntax...
  fi
else
  dciso_usage
fi
